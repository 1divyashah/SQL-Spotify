show database;
create database Spotify;
use Spotify;
CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50),
  email VARCHAR(100),
  password VARCHAR(100),
  registration_date DATE
);

-- Playlist table
CREATE TABLE Playlists (
  playlist_id INT PRIMARY KEY,
  playlist_name VARCHAR(100),
  user_id INT,
  created_at DATE,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- Track table
CREATE TABLE Tracks (
  track_id INT PRIMARY KEY,
  track_name VARCHAR(100),
  artist_name VARCHAR(100),
  album_name VARCHAR(100),
  duration INT,
  release_date DATE
);

-- PlaylistTrack table
CREATE TABLE PlaylistTracks (
  playlist_id INT,
  track_id INT,
  position INT,
  FOREIGN KEY (playlist_id) REFERENCES Playlists(playlist_id),
  FOREIGN KEY (track_id) REFERENCES Tracks(track_id)
);

#INSERT VALUES IN TABLES
-- Insert values into Users table
INSERT INTO Users (user_id, username, email, password, registration_date)
VALUES
  (1, 'Riyan', 'Riyan@gmail.com', 'password123', '2022-01-10'),
  (2, 'Sanjay', 'Sanjay@yahoo.com', 'password456', '2022-02-15'),
  (3, 'Amit', 'Amit@gmail.com', 'password789', '2022-03-20'),
  (4, 'Sheetal', 'Sheetal@yahoo.com', 'password12', '2022-04-25'),
  (5, 'Maahir', 'Maahir@gmail.com', 'password34', '2022-05-30'),
  (6, 'Prayan', 'Prayan@gmail.com', 'password56', '2022-06-05'),
  (7, 'Samarth', 'Samarth@yahoo.com', 'password78', '2022-07-10'),
  (8, 'Briti', 'Briti@yahoo.com', 'password90', '2022-08-15'),
  (9, 'Aabheri', 'Aabheri@gmail.com', 'password123', '2022-09-20'),
  (10, 'Anvika', 'Anvika@yahoo.com', 'password12', '2022-10-25');

-- Insert values into Playlists table
INSERT INTO Playlists (playlist_id, playlist_name, user_id, created_at)
VALUES
  (1, 'My Favorites', 1, '2022-01-15'),
  (2, 'Road Trip Mix', 2, '2022-02-20'),
  (3, 'Party Hits', 3, '2022-03-25'),
  (4, 'Relaxing Melodies', 4, '2022-04-30'),
  (5, 'Late Night Vibes', 5, '2022-05-05'),
  (6, 'Workout Pump', 6, '2022-06-10'),
  (7, 'Chill Beats', 7, '2022-07-15'),
  (8, 'Study Jams', 8, '2022-08-20'),
  (9, 'Throwback Tunes', 9, '2022-09-25'),
  (10, 'Weekend Grooves', 10, '2022-10-30');

-- Insert values into Tracks table
INSERT INTO Tracks (track_id, track_name, artist_name, album_name, duration, release_date)
VALUES
  (1, 'Shape of You', 'Ed Sheeran', 'รท (Divide)', 233, '2017-01-06'),
  (2, 'Blinding Lights', 'The Weeknd', 'After Hours', 200, '2019-11-29'),
  (3, 'Dance Monkey', 'Tones and I', 'The Kids Are Coming', 209, '2019-08-29'),
  (4, 'Bad Guy', 'Billie Eilish', 'When We All Fall Asleep, Where Do We Go?', 194, '2019-03-29'),
  (5, 'Rockstar', 'Post Malone ft. 21 Savage', 'Beerbongs & Bentleys', 218, '2017-09-15'),
  (6, 'Happier', 'Ed Sheeran', 'รท (Divide)', 207, '2017-01-06'),
  (7, 'Save Your Tears', 'The Weeknd', 'After Hours', 223, '2019-11-29'),
  (8, 'Never Seen the Rain', 'Tones and I', 'The Kids Are Coming', 186, '2019-08-29'),
  (9, "When the Party's Over", 'Billie Eilish', 'When We All Fall Asleep', 194, '2019-03-29'),
  (10, 'Circles', 'Post Malone', "Hollywood's Bleeding", 215, '2019-09-03'),
  (11, 'Thinking Out Loud', 'Ed Sheeran', 'x', 281, '2014-06-20'),
  (12, "Can't Feel My Fac", 'The Weeknd', 'Beauty Behind the Madness', 213, '2015-06-08'),
  (13, 'Dance Monkey', 'Tones and I', 'The Kids Are Coming', 209, '2019-08-29'),
  (14, 'Ocean Eyes', 'Billie Eilish', "Don't Smile at Me", 180, '2016-11-18'),
  (15, 'Sunflower', 'Post Malone ft. Swae Lee', 'Spider-Man: Into the Spider-Verse', 158, '2018-10-18'),
  (16, 'Photograph', 'Ed Sheeran', 'x', 258, '2014-06-20'),
  (17, 'Starboy', 'The Weeknd ft. Daft Punk', 'Starboy', 230, '2016-11-24'),
  (18, 'Dance Monkey', 'Tones and I', 'The Kids Are Coming', 209, '2019-08-29'),
  (19, 'Lovely', 'Billie Eilish ft. Khalid', '13 Reasons Why (Season 2)', 200, '2018-04-19'),
  (20, 'Better Now', 'Post Malone', 'Beerbongs & Bentleys', 231, '2018-04-27');

  
-- Insert values into PlaylistTracks table
INSERT INTO PlaylistTracks (playlist_id, track_id, position)
VALUES
  (1, 1, 1),
  (1, 2, 2),
  (1, 3, 3),
  (1, 11, 4),
  (1, 13, 5),
  (2, 4, 1),
  (2, 5, 2),
  (2, 12, 3),
  (2, 14, 4),
  (3, 1, 1),
  (3, 3, 2),
  (3, 5, 3),
  (4, 2, 1),
  (4, 4, 2),
  (5, 1, 1),
  (5, 3, 2),
  (5, 5, 3),
  (5, 15, 4),
  (5, 16, 5),
  (5, 17, 6),
  (6, 2, 1),
  (6, 4, 2),
  (7, 1, 1),
  (7, 5, 2),
  (7, 18, 3),
  (8, 3, 1),
  (8, 4, 2),
  (9, 1, 1),
  (9, 2, 2),
  (9, 3, 3),
  (9, 4, 4),
  (9, 5, 5),
  (9, 19, 6),
  (9, 20, 7),
  (10, 1, 1),
  (10, 3, 2),
  (10, 5, 3);

select * from users;
select * from Playlists;
select * from Tracks;
select * from PlaylistTracks;







-- Questions:
-- 
-- -- Basic level
-- 
-- 1. Find all the distinct album names.
select distinct(album_name) from tracks;

-- 2. Who is the artist of song 'Never Seen the Rain'?
select track_name, artist_name 
from tracks 
where track_name ="Never Seen the Rain"; 

-- 3. Name all the user & email, who have registered with gmail id.
select username, email 
from users
where email like '%gmail.com'

-- 4. List the name of users along with registration dates, who have registered after April-22.
select username,registration_date 
from users
where registration_date >'2022-04--30';

-- 5. Extract the name of tracks, artists, albums and release dates for tracks released in year 2017
select track_name,artist_name,release_date,album_name  
from tracks
where year(release_date) =2017;

-- 6. Find the details of the users who have registed in between may and august.
select *
from users
where registration_date between '2022-05-01' and '2022-08-31'

-- 7. Count the number of playlists created by each user.
select u.username, count(p.playlist_id)
from users as u left join playlists as p   #also works with inner join
on u.user_id =p.user_id 
group by u.username;

-- 8. Find the track names and their durations for a specific album in the Tracks table.
select track_name, duration, album_name 
from tracks
where album_name ='After Hours';

-- 9. Calculate the average duration of tracks in the Tracks table.
select avg(duration)
from tracks;

-- 10. How many users have registered with yahoo.com id?
 select count(*)
 from users
 where email like '%@yahoo.com';







 
-- -- Intermediate level
-- 1. Find the playlist names and the number of tracks in each playlist created by users whose email addresses end with '@gmail.com'.
 select playlist_name, count(*)
 from playlists as p inner join users as u
 on p.user_id =u.user_id 
 where u.email like '%@gmail.com'
 group by p.playlist_name, p.playlist_id;

-- 2. Write a query to retrieve the usernames and email addresses of users who have created playlists with more than 5 tracks and an average track duration greater than 200 seconds.
select u.username,u.email, avg(t.duration),count(pt.track_id)
from users as u
inner join playlists as p
on u.user_id =p.user_id
inner join playlisttracks as pt 
on p.playlist_id= pt.playlist_id 
inner join tracks as t
on pt.track_id =t.track_id 
group by u.username, u.email 
having count(pt.track_id)>5 and avg(t.duration)>200;

-- 3. Find the track and artist names of the tracks that have a duration greater than the average duration of all tracks in the 'Tracks' table.
select *
from tracks
where duration > (select avg(duration) from tracks);

-- 4. Find the users who have created playlists with tracks from all albums released in a specific year.
select * from users;
select * from Playlists;
select * from Tracks;
select * from PlaylistTracks;

select u.username
from users as u
inner join playlists as p on u.user_id =p.user_id 
inner join playlisttracks as pt on p.playlist_id =pt.playlist_id 
inner join tracks as t on t.track_id =pt.track_id 
where year(t.release_date)=2017
group by u.username 
having count(t.album_name)=(select count(distinct album_name) from tracks 
where year(release_date)=2017);

-- 5. Name of playlist and their total durations, sorted by the number of tracks in descending order.
select p.playlist_name 
from playlists as p
inner join playlisttracks as pt on p.playlist_id =pt.playlist_id 
inner join tracks as t on t.track_id =pt.track_id 
group by p.playlist_name 
order by count(pt.track_id) desc;

-- 6. Find the playlists that have tracks with a duration longer than the average duration of all tracks.
select p.playlist_name 
from playlists as p
inner join playlisttracks as pt on p.playlist_id =pt.playlist_id 
inner join tracks as t on t.track_id =pt.track_id 
where t.duration >(select avg(duration) from tracks);

-- 7. Find the top 3 playlists with the most tracks.
select p.playlist_name, count(pt.track_id) 
from playlists as p
inner join playlisttracks as pt on p.playlist_id=pt.playlist_id 
group by p.playlist_name
order by count(pt.track_id) desc 
limit 3;

-- 8. Calculate the average track duration for each user and display the results in descending order.
select u.username , avg(t.duration) as avg_dur
from users u join playlists p 
on u.user_id =p.user_id 
join playlisttracks pt
on p.playlist_id = pt.playlist_id 
join tracks t 
on pt.track_id = t.track_id 
group by u.username 
order by avg_dur desc;

-- 9. Find the track names and artist names of the tracks that are included in at least two different playlists.
select track_name, artist_name 
from tracks
where track_id in(select track_id from playlisttracks
group by track_id 
having count(distinct playlist_id)>= 2)

-- 10.  Find the playlist names and the total duration of each playlist. 
-- Include only the playlists created by users who registered in the year 2022.
select playlist_name, sum(duration)
from playlists p join playlisttracks pt
on p.playlist_id = pt.playlist_id 
join tracks t 
on pt.track_id = t.track_id 
where p.user_id in(
select  user_id from users where year(registration_date)=2022
)
group by p.playlist_id , p.playlist_name ;

-- Advanced level
-- 1. Find the track names and artist names of the tracks that are 
-- included in playlists created by users who registered
--  before the average registration date of all users.

select track_name, artist_name
from tracks
where track_id in (
select track_id from playlisttracks
where playlist_id in(
select playlist_id from playlists
where user_id in(
select user_id from users 
where registration_date <(
select avg(registration_date) from users))));





-- 2. Use subquery to retrieve the names of users
--  who have created playlists containing tracks
--  from both the album 'After Hours' by The 
-- Weeknd and the album 'When We All Fall Asleep,
--  Where Do We Go?' by Billie Eilish.

select username
from users
where user_id in(
select user_id from playlists
where playlist_id in(
select playlist_id from playlisttracks
where track_id in (
select track_id  from tracks 
where album_name = 'After Hours' and artist_name = 'The Weeknd'
)) and playlist_id in (
select playlist_id from playlisttracks
where track_id in (
select track_id  from tracks 
where album_name = 'When We All Fall Asleep, Where Do We Go?' and artist_name = 'Billie Eilish'
)
)
);
  
-- 3. Write a SQL query to extract the name 
-- of top 3 users with the highest average 
-- track duration for their playlists.
SELECT U.username, AVG(T.duration) AS average_duration
FROM Users U
JOIN Playlists P ON U.user_id = P.user_id
JOIN PlaylistTracks PT ON P.playlist_id = PT.playlist_id
JOIN Tracks T ON PT.track_id = T.track_id
GROUP BY U.username
ORDER BY average_duration DESC
LIMIT 3;   #my method

WITH playlist_avg_duration AS (
  SELECT p.user_id, AVG(t.duration) AS avg_duration
  FROM Playlists p
  INNER JOIN PlaylistTracks pt ON p.playlist_id = pt.playlist_id
  INNER JOIN Tracks t ON pt.track_id = t.track_id
  GROUP BY p.user_id
)
SELECT u.username
FROM Users u
INNER JOIN playlist_avg_duration pad ON u.user_id = pad.user_id
ORDER BY pad.avg_duration DESC
LIMIT 3;  #other method solution given

-- 4. Find the tracks that have a duration greater than the average 
-- duration of all tracks and rank them within their respective albums.
select track_name, artist_name from Tracks
where track_id in 
select track_id from playlisttracks where playlist_id in 
(select playlist_id from Playlists where user_id in 
(select registration_date from users WHERE registration_date <(SELECT AVG(registration_date) FROM Users)));

WITH track_avg_duration AS (
  SELECT album_name, track_name, duration, RANK() OVER (PARTITION BY album_name ORDER BY duration DESC) AS track_rank
  FROM Tracks
)
SELECT album_name, track_name, duration, track_rank
FROM track_avg_duration
WHERE duration > (SELECT AVG(duration) FROM Tracks)
ORDER BY album_name, track_rank;


select * from users;
select * from Playlists;
select * from Tracks;
select * from PlaylistTracks;
-- 5. Name the playlists along with the total number of tracks and the rank of the playlist based on the number of tracks.
-- 
-- 6. Find the users who have created playlists with the highest number of tracks from a specific artist.
-- 
--  
-- 
-- 7. Write a SQL query to retrieve the topmost users who have created playlists with the highest number of unique tracks from a specific artist.
-- 
-- 8. Find the tracks that have a duration greater than the average duration of all tracks
--  in their respective albums.

WITH album_avg_duration AS (
  SELECT album_name, AVG(duration) AS avg_duration
  FROM Tracks
  GROUP BY album_name
)
SELECT t.album_name, t.track_name, t.duration
FROM Tracks t
INNER JOIN album_avg_duration aad ON t.album_name = aad.album_name
WHERE t.duration > aad.avg_duration;    #solution given


select track_name ,album_name ,artist_name ,duration 
from tracks t1
where duration >(
select avg(duration) 
from tracks  t2 
where t1.album_name =t2.album_name );   #done by own


-- 9. Find name of the playlists along with the user who created them, sorted by the 
-- number of tracks in descending order and the username in ascending order.

select p.playlist_name , u.username ,count(pt.track_id)
from playlists p join users u 
on p.user_id = u.user_id 
left join playlisttracks pt 
on pt.playlist_id =p.playlist_id 
group by p.playlist_id ,p.playlist_name ,u.username 
order by count(pt.track_id) desc, u.username asc;  #my method


WITH playlist_track_counts AS (
  SELECT playlist_id, COUNT(track_id) AS track_count
  FROM PlaylistTracks
  GROUP BY playlist_id
)
SELECT p.playlist_id, p.playlist_name, p.user_id, u.username, ptc.track_count
FROM Playlists p
INNER JOIN playlist_track_counts ptc ON p.playlist_id = ptc.playlist_id
INNER JOIN Users u ON p.user_id = u.user_id
ORDER BY ptc.track_count DESC, u.username ASC;  #solution given
-- 
-- 10. Write a SQL query to retrieve the playlists along with the user who created them, 
-- and the position of the track with the longest duration within each playlist.

select max(t.duration), pt.`position` ,u.username,p.playlist_name 
from tracks as t inner join playlisttracks as pt on t.track_id = pt.track_id 
                 inner join playlists  as p on p.playlist_id =pt.playlist_id 
                 inner join users as u on u.user_id =p.user_id 
                 GROUP by p.playlist_id, u.user_id, pt.position
				ORDER by p.playlist_id, max(t.duration) DESC;   #my method
				
SELECT 
  p.playlist_name, u.username, pt.position AS track_position, t.track_name,t.duration
FROM 
  Playlists p JOIN Users u ON p.user_id = u.user_id
JOIN PlaylistTracks pt ON p.playlist_id = pt.playlist_id
JOIN Tracks t ON pt.track_id = t.track_id
WHERE (p.playlist_id, pt.track_id) IN (
    SELECT p1.playlist_id,t1.track_id FROM Playlists p1
    JOIN PlaylistTracks pt1 ON p1.playlist_id = pt1.playlist_id
    JOIN Tracks t1 ON pt1.track_id = t1.track_id
    WHERE 
      t1.duration = (
        SELECT MAX(t2.duration)FROM PlaylistTracks pt2
        JOIN Tracks t2 ON pt2.track_id = t2.track_id
        WHERE pt2.playlist_id = p1.playlist_id
      ));  #my method
	
      
  SELECT MAX(t2.duration)FROM PlaylistTracks pt2
        JOIN Tracks t2 ON pt2.track_id = t2.track_id;
      
       
   SELECT p1.playlist_id,t1.track_id FROM Playlists p1
    JOIN PlaylistTracks pt1 ON p1.playlist_id = pt1.playlist_id
    JOIN Tracks t1 ON pt1.track_id = t1.track_id;     
       
  SELECT p1.playlist_id,t1.track_id FROM Playlists p1
    JOIN PlaylistTracks pt1 ON p1.playlist_id = pt1.playlist_id
    JOIN Tracks t1 ON pt1.track_id = t1.track_id
    WHERE 
      t1.duration = (
        SELECT MAX(t2.duration)FROM PlaylistTracks pt2
        JOIN Tracks t2 ON pt2.track_id = t2.track_id
        WHERE pt2.playlist_id = p1.playlist_id
      ); 
       
WITH longest_track_positions AS (
  SELECT pt.playlist_id, MAX(t.duration) AS max_duration, MAX(pt.position) AS max_position
  FROM PlaylistTracks pt
  INNER JOIN Tracks t ON pt.track_id = t.track_id
  GROUP BY pt.playlist_id
)
SELECT p.playlist_id, p.playlist_name, p.user_id, u.username, ltp.max_duration, ltp.max_position
FROM Playlists p
INNER JOIN longest_track_positions ltp ON p.playlist_id = ltp.playlist_id
INNER JOIN Users u ON p.user_id = u.user_id;     #solution given


-- Quiz
-- 
-- 1.    Use subquery to extract names of the users who have created playlists containing tracks from the album 'รท (Divide)' by Ed Sheeran.
select username from users where user_id in
(select user_id  from playlists where  playlist_id  in  
(select playlist_id  from playlisttracks  where  track_id in 
(select track_id from tracks  where album_name ='รท (Divide)' and artist_name ="Ed Sheeran")));

SELECT username
FROM Users
WHERE user_id IN (
  SELECT user_id
  FROM Playlists
  WHERE playlist_id IN (
    SELECT playlist_id
    FROM PlaylistTracks
    WHERE track_id IN (
      SELECT track_id
      FROM Tracks
      WHERE album_name = 'รท (Divide)' AND artist_name = 'Ed Sheeran'
    )
  )
);



